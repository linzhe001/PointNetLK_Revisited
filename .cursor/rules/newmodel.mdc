---
description: 
globs: 
alwaysApply: false
---

# 架构重构规则：特征提取模块化

## 目标

将PointNetLK模型中的特征提取(Feature Extraction)部分单独提取到一个文件中，使特征提取架构可以灵活替换，同时保证与雅可比矩阵计算的兼容性。

## 重构步骤

1. 创建新文件`feature_extraction.py`
2. 实现特征提取基类和PointNet实现
3. 将雅可比矩阵计算相关代码移至新文件
4. 修改`model.py`以使用新的模块化设计

## 具体实现

### 1. 创建特征提取基类和实现

```python
# feature_extraction.py
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F

import utils


def mlp_layers(nch_input, nch_layers, b_shared=True, bn_momentum=0.1, dropout=0.0):
    """ [B, Cin, N] -> [B, Cout, N] or
        [B, Cin] -> [B, Cout]
    """
    layers = []
    last = nch_input
    for i, outp in enumerate(nch_layers):
        if b_shared:
            weights = torch.nn.Conv1d(last, outp, 1)
        else:
            weights = torch.nn.Linear(last, outp)
        layers.append(weights)
        layers.append(torch.nn.BatchNorm1d(outp, momentum=bn_momentum))
        layers.append(torch.nn.ReLU())
        if b_shared == False and dropout > 0.0:
            layers.append(torch.nn.Dropout(dropout))
        last = outp
    return layers


class MLPNet(torch.nn.Module):
    """ Multi-layer perception.
        [B, Cin, N] -> [B, Cout, N] or
        [B, Cin] -> [B, Cout]
    """
    def __init__(self, nch_input, nch_layers, b_shared=True, bn_momentum=0.1, dropout=0.0):
        super().__init__()
        list_layers = mlp_layers(nch_input, nch_layers, b_shared, bn_momentum, dropout)
        self.layers = torch.nn.Sequential(*list_layers)

    def forward(self, inp):
        out = self.layers(inp)
        return out


class FeatureExtractor(nn.Module):
    """
    特征提取器的基类，定义所有特征提取器必须实现的接口
    """
    def __init__(self, dim_k=1024):
        """
        初始化特征提取器
        
        参数:
            dim_k: 输出特征维度
        """
        super(FeatureExtractor, self).__init__()
        self.dim_k = dim_k
        
    def forward(self, points, iter):
        """
        前向传播函数
        
        参数:
            points: 输入点云 [B,N,3]
            iter: 迭代标志，用于控制输出内容
                当iter=-1时返回用于计算雅可比矩阵的中间结果
            
        返回:
            当iter=-1时: [x, [M1,M2,M3], [A1,A2,A3], [A1_x,A2_x,A3_x], [bn1_x,bn2_x,bn3_x], max_idx]
            其他情况: 特征向量 [B,dim_k]
        """
        raise NotImplementedError("子类必须实现forward方法")
    
    def get_jacobian(self, p0, mask_fn=None, a_fn=None, ax_fn=None, bn_fn=None, max_idx=None, mode="train", 
                     voxel_coords_diff=None, data_type='synthetic', num_points=None):
        """
        计算特征提取的雅可比矩阵
        
        参数:
            p0: 输入点云 [B,N,3]
            mask_fn, a_fn, ax_fn, bn_fn: 中间层输出
            max_idx: 最大池化索引
            mode: 训练或测试模式
            voxel_coords_diff: 体素坐标差异（用于真实数据）
            data_type: 数据类型（'synthetic'或'real'）
            num_points: 点云中的点数量
            
        返回:
            雅可比矩阵 [B,K,6]
        """
        raise NotImplementedError("子类必须实现get_jacobian方法")


class Pointnet_Features(FeatureExtractor):
    """
    PointNet特征提取网络，与原始模型完全一致
    """
    def __init__(self, dim_k=1024):
        super(Pointnet_Features, self).__init__(dim_k)
        
        # PointNet特征提取层
        self.mlp1 = MLPNet(3, [64], b_shared=True).layers
        self.mlp2 = MLPNet(64, [128], b_shared=True).layers
        self.mlp3 = MLPNet(128, [dim_k], b_shared=True).layers
        
    def forward(self, points, iter):
        """
        前向传播，提取点云特征
        
        参数:
            points: 输入点云 [B,N,3]
            iter: 迭代标志
            
        返回:
            与原始Pointnet_Features一致的输出
        """
        x = points.transpose(1, 2) # [B, 3, N]
        if iter == -1:
            x = self.mlp1[0](x)
            A1_x = x
            x = self.mlp1[1](x)
            bn1_x = x
            x = self.mlp1[2](x)
            M1 = (x > 0).type(torch.float)
            
            x = self.mlp2[0](x)
            A2_x = x
            x = self.mlp2[1](x)
            bn2_x = x
            x = self.mlp2[2](x)
            M2 = (x > 0).type(torch.float)
            
            x = self.mlp3[0](x)
            A3_x = x
            x = self.mlp3[1](x)
            bn3_x = x
            x = self.mlp3[2](x)
            M3 = (x > 0).type(torch.float)
            max_idx = torch.max(x, -1)[-1]
            x = F.max_pool1d(x, x.size(-1))
            x = x.view(x.size(0), -1)

            # 提取权重
            A1 = self.mlp1[0].weight
            A2 = self.mlp2[0].weight
            A3 = self.mlp3[0].weight

            return x, [M1, M2, M3], [A1, A2, A3], [A1_x, A2_x, A3_x], [bn1_x, bn2_x, bn3_x], max_idx
        else:
            x = self.mlp1(x)
            x = self.mlp2(x)
            x = self.mlp3(x)
            x = F.max_pool1d(x, x.size(-1))
            x = x.view(x.size(0), -1)

            return x
    
    def get_jacobian(self, p0, mask_fn=None, a_fn=None, ax_fn=None, bn_fn=None, max_idx=None, mode="train", 
                     voxel_coords_diff=None, data_type='synthetic', num_points=None):
        """
        计算特征提取的雅可比矩阵
        
        参数:
            p0: 输入点云 [B,N,3]
            mask_fn, a_fn, ax_fn, bn_fn: 中间层输出
            max_idx: 最大池化索引
            mode: 训练或测试模式
            voxel_coords_diff: 体素坐标差异（用于真实数据）
            data_type: 数据类型（'synthetic'或'real'）
            num_points: 点云中的点数量
            
        返回:
            雅可比矩阵 [B,K,6]
        """
        if num_points is None:
            num_points = p0.shape[1]
        batch_size = p0.shape[0]
        dim_k = self.dim_k
        device = p0.device
        
        # 1. 计算变形雅可比矩阵
        g_ = torch.zeros(batch_size, 6).to(device)
        warp_jac = compute_warp_jac(g_, p0, num_points)   # B x N x 3 x 6
        
        # 2. 计算特征雅可比矩阵
        feature_j = feature_jac(mask_fn, a_fn, ax_fn, bn_fn, device).to(device)
        feature_j = feature_j.permute(0, 3, 1, 2)   # B x N x 6 x K
        
        # 3. 组合得到最终雅可比矩阵
        J_ = torch.einsum('ijkl,ijkm->ijlm', feature_j, warp_jac)   # B x N x K x 6
        
        # 4. 根据最大池化索引进行处理
        jac_max = J_.permute(0, 2, 1, 3)   # B x K x N x 6
        jac_max_ = []
        
        for i in range(batch_size):
            jac_max_t = jac_max[i, torch.arange(dim_k), max_idx[i]]
            jac_max_.append(jac_max_t)
        jac_max_ = torch.cat(jac_max_)
        J_ = jac_max_.reshape(batch_size, dim_k, 6)   # B x K x 6
        
        if len(J_.size()) < 3:
            J = J_.unsqueeze(0)
        else:
            J = J_
        
        # 处理真实数据的特殊情况
        if mode == 'test' and data_type == 'real':
            J_ = J_.permute(1, 0, 2).reshape(dim_k, -1)   # K x (V6)
            
            # 计算条件变形雅可比矩阵
            warp_condition = cal_conditioned_warp_jacobian(voxel_coords_diff)   # V x 6 x 6
            warp_condition = warp_condition.permute(0,2,1).reshape(-1, 6)   # (V6) x 6

            J = torch.einsum('ij,jk->ik', J_, warp_condition).unsqueeze(0)   # 1 X K X 6
            
        return J


# 从utils.py移植的函数：特征雅可比矩阵计算
def feature_jac(M, A, Ax, BN, device):
    """
    计算特征雅可比矩阵
    
    参数:
        M, A, Ax, BN: 中间层输出列表
        device: 计算设备
        
    返回:
        特征雅可比矩阵
    """
    # 解包输入列表
    A1, A2, A3 = A
    M1, M2, M3 = M
    Ax1, Ax2, Ax3 = Ax
    BN1, BN2, BN3 = BN

    # 1 x c_in x c_out x 1
    A1 = (A1.T).detach().unsqueeze(-1)
    A2 = (A2.T).detach().unsqueeze(-1)
    A3 = (A3.T).detach().unsqueeze(-1)

    # 使用自动微分计算批量归一化的梯度
    # B x 1 x c_out x N
    dBN1 = torch.autograd.grad(outputs=BN1, inputs=Ax1, grad_outputs=torch.ones(BN1.size()).to(device), retain_graph=True)[0].unsqueeze(1).detach()
    dBN2 = torch.autograd.grad(outputs=BN2, inputs=Ax2, grad_outputs=torch.ones(BN2.size()).to(device), retain_graph=True)[0].unsqueeze(1).detach()
    dBN3 = torch.autograd.grad(outputs=BN3, inputs=Ax3, grad_outputs=torch.ones(BN3.size()).to(device), retain_graph=True)[0].unsqueeze(1).detach()

    # B x 1 x c_out x N
    M1 = M1.detach().unsqueeze(1)
    M2 = M2.detach().unsqueeze(1)
    M3 = M3.detach().unsqueeze(1)

    # 使用广播计算 --> B x c_in x c_out x N
    A1BN1M1 = A1 * dBN1 * M1
    A2BN2M2 = A2 * dBN2 * M2
    A3BN3M3 = M3 * dBN3 * A3

    # 使用einsum组合
    A1BN1M1_A2BN2M2 = torch.einsum('ijkl,ikml->ijml', A1BN1M1, A2BN2M2)   # B x 3 x 64 x N
    A2BN2M2_A3BN3M3 = torch.einsum('ijkl,ikml->ijml', A1BN1M1_A2BN2M2, A3BN3M3)   # B x 3 x K x N
    
    feat_jac = A2BN2M2_A3BN3M3

    return feat_jac   # B x 3 x K x N


# 从utils.py移植的函数：变形雅可比矩阵计算
def compute_warp_jac(t, points, num_points):
    """
    计算变形雅可比矩阵
    
    参数:
        t: 变换参数 [B,6]
        points: 输入点云 [B,N,3]
        num_points: 点云中的点数量
        
    返回:
        变形雅可比矩阵 [B,N,3,6]
    """
    batch_size = points.shape[0]
    
    warp_jac = torch.zeros(batch_size, num_points, 3, 6).to(points)
    T = exp(t)
    rotm = T[:, :3, :3]   # Bx3x3
    warp_jac[..., 3:] = -rotm.transpose(1,2).unsqueeze(1).repeat(1, num_points, 1, 1)   # BxNx3x6
    
    x = points[..., 0]
    y = points[..., 1]
    z = points[..., 2]
    d03 = T[:, 1, 0].unsqueeze(1) * z - T[:, 2, 0].unsqueeze(1) * y   # BxN
    d04 = -T[:, 0, 0].unsqueeze(1) * z + T[:, 2, 0].unsqueeze(1) * x
    d05 = T[:, 0, 0].unsqueeze(1) * y - T[:, 1, 0].unsqueeze(1) * x
    d13 = T[:, 1, 1].unsqueeze(1) * z - T[:, 2, 1].unsqueeze(1) * y
    d14 = -T[:, 0, 1].unsqueeze(1) * z + T[:, 2, 1].unsqueeze(1) * x
    d15 = T[:, 0, 1].unsqueeze(1) * y - T[:, 1, 1].unsqueeze(1) * x
    d23 = T[:, 1, 2].unsqueeze(1) * z - T[:, 2, 2].unsqueeze(1) * y
    d24 = -T[:, 0, 2].unsqueeze(1) * z + T[:, 2, 2].unsqueeze(1) * x
    d25 = T[:, 0, 2].unsqueeze(1) * y - T[:, 1, 2].unsqueeze(1) * x
    
    d0 = torch.cat([d03.unsqueeze(-1), d04.unsqueeze(-1), d05.unsqueeze(-1)], -1)   # BxNx3
    d1 = torch.cat([d13.unsqueeze(-1), d14.unsqueeze(-1), d15.unsqueeze(-1)], -1)
    d2 = torch.cat([d23.unsqueeze(-1), d24.unsqueeze(-1), d25.unsqueeze(-1)], -1)
    warp_jac[..., :3] = torch.cat([d0.unsqueeze(-2), d1.unsqueeze(-2), d2.unsqueeze(-2)], -2)

    return warp_jac


# 从utils.py移植的函数：条件变形雅可比矩阵计算
def cal_conditioned_warp_jacobian(voxel_coords):
    """
    计算条件变形雅可比矩阵（用于真实数据）
    
    参数:
        voxel_coords: 体素坐标
        
    返回:
        条件变形雅可比矩阵
    """
    # 计算体素坐标与全局坐标的变换矩阵
    V = voxel_coords.shape[0]
    conditioned_jac = torch.eye(6).repeat(V, 1, 1).to(voxel_coords)   # V x 6 x 6
    trans_twist_mat_00 = torch.zeros(V, 1).to(voxel_coords)
    trans_twist_mat_11 = torch.zeros(V, 1).to(voxel_coords)
    trans_twist_mat_22 = torch.zeros(V, 1).to(voxel_coords)
    trans_twist_mat_01 = -voxel_coords[:, 2].unsqueeze(1)
    trans_twist_mat_02 = voxel_coords[:, 1].unsqueeze(1)
    trans_twist_mat_10 = voxel_coords[:, 2].unsqueeze(1)
    trans_twist_mat_12 = -voxel_coords[:, 0].unsqueeze(1)
    trans_twist_mat_20 = -voxel_coords[:, 1].unsqueeze(1)
    trans_twist_mat_21 = voxel_coords[:, 0].unsqueeze(1)
    
    trans_twist_mat_0 = torch.cat([trans_twist_mat_00, trans_twist_mat_01, trans_twist_mat_02], 1).reshape(-1, 3)
    trans_twist_mat_1 = torch.cat([trans_twist_mat_10, trans_twist_mat_11, trans_twist_mat_12], 1).reshape(-1, 3)
    trans_twist_mat_2 = torch.cat([trans_twist_mat_20, trans_twist_mat_21, trans_twist_mat_22], 1).reshape(-1, 3)
    trans_twist_mat = torch.cat([trans_twist_mat_0, trans_twist_mat_1, trans_twist_mat_2], 1).reshape(-1, 3, 3)
    conditioned_jac[:, 3:, :3] = trans_twist_mat   # V x 6 x 6
    
    conditioned_jac = torch.inverse(conditioned_jac).float()
    
    return conditioned_jac


# 从utils.py移植的必要函数：指数映射
def sinc1(t):
    """ sinc1: t -> sin(t)/t """
    e = 0.01
    r = torch.zeros_like(t)
    a = torch.abs(t)

    s = a < e
    c = (s == 0)
    t2 = t[s] ** 2
    r[s] = 1 - t2/6*(1 - t2/20*(1 - t2/42))   # Taylor series O(t^8)
    r[c] = torch.sin(t[c]) / t[c]

    return r


def sinc2(t):
    """ sinc2: t -> (1 - cos(t)) / (t**2) """
    e = 0.01
    r = torch.zeros_like(t)
    a = torch.abs(t)

    s = a < e
    c = (s == 0)
    t2 = t ** 2
    r[s] = 1/2*(1-t2[s]/12*(1-t2[s]/30*(1-t2[s]/56)))   # Taylor series O(t^8)
    r[c] = (1-torch.cos(t[c]))/t2[c]

    return r


def sinc3(t):
    """ sinc3: t -> (t - sin(t)) / (t**3) """
    e = 0.01
    r = torch.zeros_like(t)
    a = torch.abs(t)

    s = a < e
    c = (s == 0)
    t2 = t[s] ** 2
    r[s] = 1/6*(1-t2/20*(1-t2/42*(1-t2/72)))   # Taylor series O(t^8)
    r[c] = (t[c]-torch.sin(t[c]))/(t[c]**3)

    return r


def mat_so3(x):
    # x: [*, 3]
    # X: [*, 3, 3]
    x_ = x.view(-1, 3)
    x1, x2, x3 = x_[:, 0], x_[:, 1], x_[:, 2]
    O = torch.zeros_like(x1)

    X = torch.stack((
        torch.stack((O, -x3, x2), dim=1),
        torch.stack((x3, O, -x1), dim=1),
        torch.stack((-x2, x1, O), dim=1)), dim=1)
    return X.view(*(x.size()[0:-1]), 3, 3)


def exp(x):
    """
    SE(3)指数映射函数
    
    参数:
        x: 李代数参数 [B,6]
        
    返回:
        变换矩阵 [B,4,4]
    """
    x_ = x.view(-1, 6)
    w, v = x_[:, 0:3], x_[:, 3:6]
    t = w.norm(p=2, dim=1).view(-1, 1, 1)   # norm of rotation
    W = mat_so3(w)
    S = W.bmm(W)
    I = torch.eye(3).to(w)

    # Rodrigues' rotation formula.
    R = I + sinc1(t)*W + sinc2(t)*S
    V = I + sinc2(t)*W + sinc3(t)*S

    p = V.bmm(v.contiguous().view(-1, 3, 1))

    z = torch.Tensor([0, 0, 0, 1]).view(1, 1, 4).repeat(x_.size(0), 1, 1).to(x)
    Rp = torch.cat((R, p), dim=2)
    g = torch.cat((Rp, z), dim=1)

    return g.view(*(x.size()[0:-1]), 4, 4)
```

### 2. 修改model.py以使用新的模块化设计

```python
# model.py中的修改
from feature_extraction import FeatureExtractor, Pointnet_Features

class AnalyticalPointNetLK(torch.nn.Module):
    def __init__(self, ptnet, device):
        """
        初始化AnalyticalPointNetLK模型
        
        参数:
            ptnet: 特征提取器实例，必须继承自FeatureExtractor
            device: 计算设备
        """
        super().__init__()
        
        # 确保ptnet是FeatureExtractor的子类
        assert isinstance(ptnet, FeatureExtractor), "特征提取器必须继承自FeatureExtractor"
        
        self.ptnet = ptnet
        self.device = device
        self.inverse = utils.InvMatrix.apply
        self.exp = utils.ExpMap.apply
        self.transform = utils.transform

        self.step_train = 0
        self.step_test = 0

        # 结果
        self.last_err = None
        self.prev_r = None
        self.g = None
        self.itr = 0
    
    # 其他方法保持不变...
    
    def Cal_Jac(self, Mask_fn, A_fn, Ax_fn, BN_fn, max_idx, num_points, p0, mode, voxel_coords_diff=None, data_type='synthetic'):
        """
        调用特征提取器的get_jacobian方法计算雅可比矩阵
        """
        return self.ptnet.get_jacobian(
            p0=p0, 
            mask_fn=Mask_fn, 
            a_fn=A_fn, 
            ax_fn=Ax_fn, 
            bn_fn=BN_fn, 
            max_idx=max_idx, 
            mode=mode,
            voxel_coords_diff=voxel_coords_diff,
            data_type=data_type,
            num_points=num_points
        )
        
    # 其他方法保持不变...
```

### 3. 修改trainer.py以使用新模块

```python
# trainer.py中的修改
from feature_extraction import Pointnet_Features

class TrainerAnalyticalPointNetLK:
    # ...其他方法保持不变...
    
    def create_features(self):
        """
        创建特征提取网络
        
        返回:
            Pointnet_Features或其他特征提取器实例
        """
        if self.embedding == 'pointnet':
            ptnet = Pointnet_Features(dim_k=self.dim_k)
        # 可以在这里添加其他特征提取器的创建
        return ptnet.float()

    def create_from_pointnet_features(self, ptnet):
        """
        从特征提取器创建PointNetLK模型
        
        参数:
            ptnet: 特征提取器实例
            
        返回:
            AnalyticalPointNetLK模型实例
        """
        return model.AnalyticalPointNetLK(ptnet, self.device)

    # 其他方法保持不变...
```

## 如何创建自定义特征提取器

使用此架构，可以通过继承`FeatureExtractor`基类并实现必要的方法来创建自定义特征提取器：

```python
# 示例：创建自定义特征提取器
class CustomFeatureExtractor(FeatureExtractor):
    def __init__(self, dim_k=1024):
        super(CustomFeatureExtractor, self).__init__(dim_k)
        # 定义自定义网络架构...
        
    def forward(self, points, iter):
        # 实现自定义特征提取...
        if iter == -1:
            # 返回特征和用于雅可比矩阵计算的中间结果
            # 必须与原始PointNet接口一致：[x, [M1,M2,M3], [A1,A2,A3], [A1_x,A2_x,A3_x], [bn1_x,bn2_x,bn3_x], max_idx]
            return features, masks, weights, activations, batch_norms, indices
        return features
        
    def get_jacobian(self, p0, mask_fn=None, a_fn=None, ax_fn=None, bn_fn=None, max_idx=None, mode="train", 
                    voxel_coords_diff=None, data_type='synthetic', num_points=None):
        # 实现自定义雅可比矩阵计算...
        return jacobian
```

## 使用方法

替换特征提取器只需修改`TrainerAnalyticalPointNetLK.create_features()`方法：

```python
def create_features(self):
    # 使用自定义特征提取器
    if self.embedding == 'custom':
        return CustomFeatureExtractor(dim_k=self.dim_k).float()
    else:
        return Pointnet_Features(dim_k=self.dim_k).float()
```

## 注意事项

1. 自定义特征提取器必须实现`forward`和`get_jacobian`方法
2. `forward`方法在`iter=-1`时返回的格式必须与原始PointNet一致
3. 雅可比矩阵计算必须处理真实数据和合成数据的不同情况
4. 对于不同的特征提取架构，需要适当修改`get_jacobian`方法以适应新的网络结构
